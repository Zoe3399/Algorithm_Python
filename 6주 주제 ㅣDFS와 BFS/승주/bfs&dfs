# https://www.acmicpc.net/problem/1260

import sys
# dfs 구현 (재귀함수)
# << 방문할 수 있는곳은 모두 방문하고,그 방문된 노드들은 출력
def dfs(idx):
    global visited # visited 불러옴(접근)
    # dfs가 호출 됬기 때문에 idx는 방문 한거임
    visited[idx] = True  # 재방문 금지~
    # 현재 방문한 순서대로 계속해서 출력 ex) 1
    print(idx, end = ' ') 
    
    # 1~ n+1까지 쭉 돌면서 next 노드가 방문 여부 확인
    # if 방문 가능하면 방문
    for next in range(1, n+1):
        # next란 녀석이 방문한적이 없고
        # graph에서 [idx][next]가 있다면 (내가 현재 갈 수있는 곳이라면) 방문
        if not visited[next] and graph[idx][next]:
            dfs(next) # 호출 될 때마다 visited는 True

# bfs 구현 (q)
# <<
def bfs():
    global q, visited # 접근
    # 가장 일반적인 형태
    # q에 요소가 존재할 때 까지 계속해서 돌겠음
    while q:
        # 0번 idx를 뽑아 와서 cur에 담기
        cur = q.pop(0) # 최상단 뽑기
        print(cur, end = ' ')
        
        '''
        cur 노드로부터 갈 수 있는 모든 노드들을 
        q의 뒤에다가 계속 붙여줌
        다음 턴이 되었을 때에는 가장 앞에있는 녀석이
        pop.되어 cur가 될것이고
        cur 기준으로 갈 수있는 곳들을 또 q의 뒤에 붙이기
        '''
        for next in range(1, n + 1):
            if not visited[next] and graph[cur][next]:
                visited[next] = True
                # 방문했다 = q의 맨끝에다가 넣어주겠다
                q.append(next)
                
                # 끝에 넣어주는 이유?
                # next 순서가 q의 순서대로 들어오는 거고
                # while loop가 계속 돌면서 자기 순서가 되었을때는
                # 출력이 되고 끝날 것이니. 
        
      
# 0. 입력 및 초기화
input = sys.stdin.readline
n, m ,v = map(int, input().split())

# (n+1) * (n+1) 의 False로 이루어진 배열 생성
graph = [[False] * (n + 1) for _ in range( n + 1) ]

# 방문한 곳 표기용 1차원 배열생성
visited = [False] * (n + 1)

# 1. graph 정보 입력 = 배열

# m개의 간선의 정보를 그래프에 반영
# m번 반복하면서 a,b의 정보를 입력 받기
for _ in range(m):
    a,b = map(int, input().split())
    # 1,2 = 1~2 , 2~1 도 갈 수 있다
    graph[a][b] = True
    graph[b][a] = True
    # >> 그래프의 정보 입력 완료

# 2. dfs 
dfs(v) # v노드 부터 dfs 함수를 수행
print() # 줄바꿈

# 3. bfs
# 새로 다시 초기화
visited = [False] * (n + 1)

# v로 부터 출발하기 원하니까
q = [v]

# v노드 재방문x
visited[v] = True
bfs()